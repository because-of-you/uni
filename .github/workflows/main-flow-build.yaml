# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# 主分支构建 优化构建方案 使用新镜像代替
name: uni project main branch build

on:
  push:
    # 关联主分支
    branches:
      - main
    # 关联tag
    tags:
      - v*.*.*
  # 每天 的 一点 凌晨 调度运行
#  schedule:
#    - cron: '0 1 * * *'
env:
  CURRENT_BRANCH: main
  IMAGE: registry.cn-hangzhou.aliyuncs.com/acitrus/uni
  REGISTRY: registry.cn-hangzhou.aliyuncs.com

jobs:
  main-branch-build:
    runs-on: ubuntu-latest

    steps:
      # 1. git pull                                                                                                     see more -> https://github.com/actions/checkout
      - name: git pull and force checkout main branch
        id: _1
        uses: actions/checkout@v3
        with:
          ref: ${{ env.CURRENT_BRANCH }}

      # 2. jdk-17 environment setup                                                                                     see more -> https://github.com/actions/setup-java
      - name: set jdk 17
        id: _2
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven

      # 3. maven clean package
      - name: maven build
        id: _3
        run: |
          mvn clean -U
          mvn -T 1C -DskipTests=true package

      # 4. docker meta                                                                                                  see more -> https://github.com/docker/metadata-action
      - name: docker meta
        id: _4
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE }}

      # 5. docker login                                                                                                 see more -> https://github.com/docker/login-action
      - name: docker login
        id: _5
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: ${{ env.REGISTRY }}

      # 6. mul platform build
      - name: mul platform build
        id: _6
        uses: docker/setup-buildx-action@v2

      # 7. docker push                                                                                                  see more -> https://github.com/docker/build-push-action
      - name: docker push
        id: _7
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: .github/docker/DockerFile
          push: ${{ github.event_name != 'pull_request' }}
          # 此处的step需要修改
          tags: ${{ steps._4.outputs.tags }}
          labels: ${{ steps._4.outputs.labels }}

      # 8. mvn clean
      - name: maven clean
        id: _8
        run: |
          mvn clean

      # 9. scp                                                                                                          see more -> https://github.com/appleboy/scp-action
      - name: scp
        id: _9
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USER }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          source: "*"
          target: "/opt/component/server"
          rm: true

      # restart                                                                                                         see more -> https://github.com/appleboy/ssh-action
      - name: restart
        id: _10
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.ALIYUN_HOST }}
          username: ${{ secrets.ALIYUN_USER }}
          password: ${{ secrets.ALIYUN_PASSWORD }}
          script: |
            cd /opt/component/server/.github/docker
            echo "DATASOURCE_HOST=${{ secrets.DATASOURCE_HOST }}" >> .env
            echo "DATASOURCE_PORT=${{ secrets.DATASOURCE_PORT }}" >> .env
            echo "DATASOURCE_USER=${{ secrets.DATASOURCE_USER }}" >> .env
            echo "DATASOURCE_PASSWORD=${{ secrets.DATASOURCE_PASSWORD }}" >> .env
            chmod +x ./compose-restart.sh && ./compose-restart.sh